// Mocks generated by Mockito 5.4.0 from annotations
// in es/test/Controller/BudgetMenuController_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i6;
import 'package:es/Controller/BudgetMenuController.dart' as _i10;
import 'package:es/Database/RemoteDBHelper.dart' as _i2;
import 'package:es/Model/BudgetBarModel.dart' as _i11;
import 'package:es/Model/CategoryModel.dart' as _i8;
import 'package:es/Model/SavingsModel.dart' as _i12;
import 'package:es/Model/TransactionsModel.dart' as _i7;
import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:flutter/cupertino.dart' as _i4;
import 'package:flutter/foundation.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRemoteDBHelper_0 extends _i1.SmartFake
    implements _i2.RemoteDBHelper {
  _FakeRemoteDBHelper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAuth_1 extends _i1.SmartFake implements _i3.FirebaseAuth {
  _FakeFirebaseAuth_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_2 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStreamSubscription_3<T> extends _i1.SmartFake
    implements _i5.StreamSubscription<T> {
  _FakeStreamSubscription_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_4<T> extends _i1.SmartFake implements _i5.Future<T> {
  _FakeFuture_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_5 extends _i1.SmartFake
    implements _i6.FirebaseFirestore {
  _FakeFirebaseFirestore_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionModel_6 extends _i1.SmartFake
    implements _i7.TransactionModel {
  _FakeTransactionModel_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategoryModel_7 extends _i1.SmartFake implements _i8.CategoryModel {
  _FakeCategoryModel_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_8 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInheritedWidget_9 extends _i1.SmartFake
    implements _i4.InheritedWidget {
  _FakeInheritedWidget_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_10 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i9.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [BudgetMenuController].
///
/// See the documentation for Mockito's code generation for more information.
class MockBudgetMenuController extends _i1.Mock
    implements _i10.BudgetMenuController {
  @override
  _i2.RemoteDBHelper get remoteDBHelper => (super.noSuchMethod(
        Invocation.getter(#remoteDBHelper),
        returnValue: _FakeRemoteDBHelper_0(
          this,
          Invocation.getter(#remoteDBHelper),
        ),
        returnValueForMissingStub: _FakeRemoteDBHelper_0(
          this,
          Invocation.getter(#remoteDBHelper),
        ),
      ) as _i2.RemoteDBHelper);
  @override
  set remoteDBHelper(_i2.RemoteDBHelper? _remoteDBHelper) => super.noSuchMethod(
        Invocation.setter(
          #remoteDBHelper,
          _remoteDBHelper,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.FirebaseAuth get userInstance => (super.noSuchMethod(
        Invocation.getter(#userInstance),
        returnValue: _FakeFirebaseAuth_1(
          this,
          Invocation.getter(#userInstance),
        ),
        returnValueForMissingStub: _FakeFirebaseAuth_1(
          this,
          Invocation.getter(#userInstance),
        ),
      ) as _i3.FirebaseAuth);
  @override
  set userInstance(_i3.FirebaseAuth? _userInstance) => super.noSuchMethod(
        Invocation.setter(
          #userInstance,
          _userInstance,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get selectedVal => (super.noSuchMethod(
        Invocation.getter(#selectedVal),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set selectedVal(String? _selectedVal) => super.noSuchMethod(
        Invocation.setter(
          #selectedVal,
          _selectedVal,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<String> get listitems => (super.noSuchMethod(
        Invocation.getter(#listitems),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  set listitems(List<String>? _listitems) => super.noSuchMethod(
        Invocation.setter(
          #listitems,
          _listitems,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get initState_ => (super.noSuchMethod(
        Invocation.getter(#initState_),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set initState_(bool? _initState_) => super.noSuchMethod(
        Invocation.setter(
          #initState_,
          _initState_,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get totalBudgetValue => (super.noSuchMethod(
        Invocation.getter(#totalBudgetValue),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  set totalBudgetValue(double? _totalBudgetValue) => super.noSuchMethod(
        Invocation.setter(
          #totalBudgetValue,
          _totalBudgetValue,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void editBudgetMenu(_i4.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #EditBudgetMenu,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void loadBudgetBars(
    _i2.RemoteDBHelper? db,
    _i4.BuildContext? context,
    Function? callback,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #loadBudgetBars,
          [
            db,
            context,
            callback,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Widget buildDropdownList(
    _i2.RemoteDBHelper? db,
    _i4.BuildContext? context,
    Function? callback,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildDropdownList,
          [
            db,
            context,
            callback,
          ],
        ),
        returnValue: _FakeWidget_2(
          this,
          Invocation.method(
            #buildDropdownList,
            [
              db,
              context,
              callback,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeWidget_2(
          this,
          Invocation.method(
            #buildDropdownList,
            [
              db,
              context,
              callback,
            ],
          ),
        ),
      ) as _i4.Widget);
  @override
  void getTransactions(
    _i2.RemoteDBHelper? db,
    Function? callback,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [
            db,
            callback,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void checkLimit(
    _i11.BudgetBarModel? model,
    double? threshold,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #checkLimit,
          [
            model,
            threshold,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BudgetBarModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockBudgetBarModel extends _i1.Mock implements _i11.BudgetBarModel {
  @override
  set categoryName(String? _categoryName) => super.noSuchMethod(
        Invocation.setter(
          #categoryName,
          _categoryName,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get categoryID => (super.noSuchMethod(
        Invocation.getter(#categoryID),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set categoryID(String? _categoryID) => super.noSuchMethod(
        Invocation.setter(
          #categoryID,
          _categoryID,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get userID => (super.noSuchMethod(
        Invocation.getter(#userID),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set userID(String? _userID) => super.noSuchMethod(
        Invocation.setter(
          #userID,
          _userID,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set limit(double? _limit) => super.noSuchMethod(
        Invocation.setter(
          #limit,
          _limit,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set value(double? _value) => super.noSuchMethod(
        Invocation.setter(
          #value,
          _value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set color(int? _color) => super.noSuchMethod(
        Invocation.setter(
          #color,
          _color,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set x(int? _x) => super.noSuchMethod(
        Invocation.setter(
          #x,
          _x,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set y(double? _y) => super.noSuchMethod(
        Invocation.setter(
          #y,
          _y,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onLimit(bool? _onLimit) => super.noSuchMethod(
        Invocation.setter(
          #onLimit,
          _onLimit,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set overLimit(bool? _overLimit) => super.noSuchMethod(
        Invocation.setter(
          #overLimit,
          _overLimit,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Stream].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamTransactionModel extends _i1.Mock
    implements _i5.Stream<List<_i7.TransactionModel>> {
  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i5.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<List<_i7.TransactionModel>> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
      ) as _i5.Future<List<_i7.TransactionModel>>);
  @override
  _i5.Future<List<_i7.TransactionModel>> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
      ) as _i5.Future<List<_i7.TransactionModel>>);
  @override
  _i5.Future<List<_i7.TransactionModel>> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
      ) as _i5.Future<List<_i7.TransactionModel>>);
  @override
  _i5.Stream<List<_i7.TransactionModel>> asBroadcastStream({
    void Function(_i5.StreamSubscription<List<_i7.TransactionModel>>)? onListen,
    void Function(_i5.StreamSubscription<List<_i7.TransactionModel>>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i5.Stream<List<_i7.TransactionModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i7.TransactionModel>>.empty(),
      ) as _i5.Stream<List<_i7.TransactionModel>>);
  @override
  _i5.StreamSubscription<List<_i7.TransactionModel>> listen(
    void Function(List<_i7.TransactionModel>)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_3<List<_i7.TransactionModel>>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
        returnValueForMissingStub:
            _FakeStreamSubscription_3<List<_i7.TransactionModel>>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i5.StreamSubscription<List<_i7.TransactionModel>>);
  @override
  _i5.Stream<List<_i7.TransactionModel>> where(
          bool Function(List<_i7.TransactionModel>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i5.Stream<List<_i7.TransactionModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i7.TransactionModel>>.empty(),
      ) as _i5.Stream<List<_i7.TransactionModel>>);
  @override
  _i5.Stream<S> map<S>(S Function(List<_i7.TransactionModel>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i5.Stream<S>.empty(),
        returnValueForMissingStub: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);
  @override
  _i5.Stream<E> asyncMap<E>(
          _i5.FutureOr<E> Function(List<_i7.TransactionModel>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i5.Stream<E>.empty(),
        returnValueForMissingStub: _i5.Stream<E>.empty(),
      ) as _i5.Stream<E>);
  @override
  _i5.Stream<E> asyncExpand<E>(
          _i5.Stream<E>? Function(List<_i7.TransactionModel>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i5.Stream<E>.empty(),
        returnValueForMissingStub: _i5.Stream<E>.empty(),
      ) as _i5.Stream<E>);
  @override
  _i5.Stream<List<_i7.TransactionModel>> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i5.Stream<List<_i7.TransactionModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i7.TransactionModel>>.empty(),
      ) as _i5.Stream<List<_i7.TransactionModel>>);
  @override
  _i5.Stream<S> expand<S>(
          Iterable<S> Function(List<_i7.TransactionModel>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i5.Stream<S>.empty(),
        returnValueForMissingStub: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);
  @override
  _i5.Future<dynamic> pipe(
          _i5.StreamConsumer<List<_i7.TransactionModel>>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Stream<S> transform<S>(
          _i5.StreamTransformer<List<_i7.TransactionModel>, S>?
              streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i5.Stream<S>.empty(),
        returnValueForMissingStub: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);
  @override
  _i5.Future<List<_i7.TransactionModel>> reduce(
          List<_i7.TransactionModel> Function(
            List<_i7.TransactionModel>,
            List<_i7.TransactionModel>,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
      ) as _i5.Future<List<_i7.TransactionModel>>);
  @override
  _i5.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      List<_i7.TransactionModel>,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _FakeFuture_4<S>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeFuture_4<S>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
      ) as _i5.Future<S>);
  @override
  _i5.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i5.Future<String>.value(''),
        returnValueForMissingStub: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
  @override
  _i5.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<dynamic> forEach(
          void Function(List<_i7.TransactionModel>)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<bool> every(bool Function(List<_i7.TransactionModel>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> any(bool Function(List<_i7.TransactionModel>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i5.Stream<R>.empty(),
        returnValueForMissingStub: _i5.Stream<R>.empty(),
      ) as _i5.Stream<R>);
  @override
  _i5.Future<List<List<_i7.TransactionModel>>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i5.Future<List<List<_i7.TransactionModel>>>.value(
            <List<_i7.TransactionModel>>[]),
        returnValueForMissingStub:
            _i5.Future<List<List<_i7.TransactionModel>>>.value(
                <List<_i7.TransactionModel>>[]),
      ) as _i5.Future<List<List<_i7.TransactionModel>>>);
  @override
  _i5.Future<Set<List<_i7.TransactionModel>>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i5.Future<Set<List<_i7.TransactionModel>>>.value(
            <List<_i7.TransactionModel>>{}),
        returnValueForMissingStub:
            _i5.Future<Set<List<_i7.TransactionModel>>>.value(
                <List<_i7.TransactionModel>>{}),
      ) as _i5.Future<Set<List<_i7.TransactionModel>>>);
  @override
  _i5.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _FakeFuture_4<E>(
          this,
          Invocation.method(
            #drain,
            [futureValue],
          ),
        ),
        returnValueForMissingStub: _FakeFuture_4<E>(
          this,
          Invocation.method(
            #drain,
            [futureValue],
          ),
        ),
      ) as _i5.Future<E>);
  @override
  _i5.Stream<List<_i7.TransactionModel>> take(int? count) =>
      (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i5.Stream<List<_i7.TransactionModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i7.TransactionModel>>.empty(),
      ) as _i5.Stream<List<_i7.TransactionModel>>);
  @override
  _i5.Stream<List<_i7.TransactionModel>> takeWhile(
          bool Function(List<_i7.TransactionModel>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i5.Stream<List<_i7.TransactionModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i7.TransactionModel>>.empty(),
      ) as _i5.Stream<List<_i7.TransactionModel>>);
  @override
  _i5.Stream<List<_i7.TransactionModel>> skip(int? count) =>
      (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i5.Stream<List<_i7.TransactionModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i7.TransactionModel>>.empty(),
      ) as _i5.Stream<List<_i7.TransactionModel>>);
  @override
  _i5.Stream<List<_i7.TransactionModel>> skipWhile(
          bool Function(List<_i7.TransactionModel>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i5.Stream<List<_i7.TransactionModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i7.TransactionModel>>.empty(),
      ) as _i5.Stream<List<_i7.TransactionModel>>);
  @override
  _i5.Stream<List<_i7.TransactionModel>> distinct(
          [bool Function(
            List<_i7.TransactionModel>,
            List<_i7.TransactionModel>,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i5.Stream<List<_i7.TransactionModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i7.TransactionModel>>.empty(),
      ) as _i5.Stream<List<_i7.TransactionModel>>);
  @override
  _i5.Future<List<_i7.TransactionModel>> firstWhere(
    bool Function(List<_i7.TransactionModel>)? test, {
    List<_i7.TransactionModel> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
      ) as _i5.Future<List<_i7.TransactionModel>>);
  @override
  _i5.Future<List<_i7.TransactionModel>> lastWhere(
    bool Function(List<_i7.TransactionModel>)? test, {
    List<_i7.TransactionModel> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
      ) as _i5.Future<List<_i7.TransactionModel>>);
  @override
  _i5.Future<List<_i7.TransactionModel>> singleWhere(
    bool Function(List<_i7.TransactionModel>)? test, {
    List<_i7.TransactionModel> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
      ) as _i5.Future<List<_i7.TransactionModel>>);
  @override
  _i5.Future<List<_i7.TransactionModel>> elementAt(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
      ) as _i5.Future<List<_i7.TransactionModel>>);
  @override
  _i5.Stream<List<_i7.TransactionModel>> timeout(
    Duration? timeLimit, {
    void Function(_i5.EventSink<List<_i7.TransactionModel>>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i5.Stream<List<_i7.TransactionModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i7.TransactionModel>>.empty(),
      ) as _i5.Stream<List<_i7.TransactionModel>>);
}

/// A class which mocks [Stream].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamBudgetBars extends _i1.Mock
    implements _i5.Stream<List<_i11.BudgetBarModel>> {
  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i5.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<List<_i11.BudgetBarModel>> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
      ) as _i5.Future<List<_i11.BudgetBarModel>>);
  @override
  _i5.Future<List<_i11.BudgetBarModel>> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
      ) as _i5.Future<List<_i11.BudgetBarModel>>);
  @override
  _i5.Future<List<_i11.BudgetBarModel>> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
      ) as _i5.Future<List<_i11.BudgetBarModel>>);
  @override
  _i5.Stream<List<_i11.BudgetBarModel>> asBroadcastStream({
    void Function(_i5.StreamSubscription<List<_i11.BudgetBarModel>>)? onListen,
    void Function(_i5.StreamSubscription<List<_i11.BudgetBarModel>>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
      ) as _i5.Stream<List<_i11.BudgetBarModel>>);
  @override
  _i5.StreamSubscription<List<_i11.BudgetBarModel>> listen(
    void Function(List<_i11.BudgetBarModel>)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_3<List<_i11.BudgetBarModel>>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
        returnValueForMissingStub:
            _FakeStreamSubscription_3<List<_i11.BudgetBarModel>>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i5.StreamSubscription<List<_i11.BudgetBarModel>>);
  @override
  _i5.Stream<List<_i11.BudgetBarModel>> where(
          bool Function(List<_i11.BudgetBarModel>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
      ) as _i5.Stream<List<_i11.BudgetBarModel>>);
  @override
  _i5.Stream<S> map<S>(S Function(List<_i11.BudgetBarModel>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i5.Stream<S>.empty(),
        returnValueForMissingStub: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);
  @override
  _i5.Stream<E> asyncMap<E>(
          _i5.FutureOr<E> Function(List<_i11.BudgetBarModel>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i5.Stream<E>.empty(),
        returnValueForMissingStub: _i5.Stream<E>.empty(),
      ) as _i5.Stream<E>);
  @override
  _i5.Stream<E> asyncExpand<E>(
          _i5.Stream<E>? Function(List<_i11.BudgetBarModel>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i5.Stream<E>.empty(),
        returnValueForMissingStub: _i5.Stream<E>.empty(),
      ) as _i5.Stream<E>);
  @override
  _i5.Stream<List<_i11.BudgetBarModel>> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
      ) as _i5.Stream<List<_i11.BudgetBarModel>>);
  @override
  _i5.Stream<S> expand<S>(
          Iterable<S> Function(List<_i11.BudgetBarModel>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i5.Stream<S>.empty(),
        returnValueForMissingStub: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);
  @override
  _i5.Future<dynamic> pipe(
          _i5.StreamConsumer<List<_i11.BudgetBarModel>>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Stream<S> transform<S>(
          _i5.StreamTransformer<List<_i11.BudgetBarModel>, S>?
              streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i5.Stream<S>.empty(),
        returnValueForMissingStub: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);
  @override
  _i5.Future<List<_i11.BudgetBarModel>> reduce(
          List<_i11.BudgetBarModel> Function(
            List<_i11.BudgetBarModel>,
            List<_i11.BudgetBarModel>,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
      ) as _i5.Future<List<_i11.BudgetBarModel>>);
  @override
  _i5.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      List<_i11.BudgetBarModel>,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _FakeFuture_4<S>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeFuture_4<S>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
      ) as _i5.Future<S>);
  @override
  _i5.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i5.Future<String>.value(''),
        returnValueForMissingStub: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
  @override
  _i5.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<dynamic> forEach(
          void Function(List<_i11.BudgetBarModel>)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<bool> every(bool Function(List<_i11.BudgetBarModel>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> any(bool Function(List<_i11.BudgetBarModel>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i5.Stream<R>.empty(),
        returnValueForMissingStub: _i5.Stream<R>.empty(),
      ) as _i5.Stream<R>);
  @override
  _i5.Future<List<List<_i11.BudgetBarModel>>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i5.Future<List<List<_i11.BudgetBarModel>>>.value(
            <List<_i11.BudgetBarModel>>[]),
        returnValueForMissingStub:
            _i5.Future<List<List<_i11.BudgetBarModel>>>.value(
                <List<_i11.BudgetBarModel>>[]),
      ) as _i5.Future<List<List<_i11.BudgetBarModel>>>);
  @override
  _i5.Future<Set<List<_i11.BudgetBarModel>>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i5.Future<Set<List<_i11.BudgetBarModel>>>.value(
            <List<_i11.BudgetBarModel>>{}),
        returnValueForMissingStub:
            _i5.Future<Set<List<_i11.BudgetBarModel>>>.value(
                <List<_i11.BudgetBarModel>>{}),
      ) as _i5.Future<Set<List<_i11.BudgetBarModel>>>);
  @override
  _i5.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _FakeFuture_4<E>(
          this,
          Invocation.method(
            #drain,
            [futureValue],
          ),
        ),
        returnValueForMissingStub: _FakeFuture_4<E>(
          this,
          Invocation.method(
            #drain,
            [futureValue],
          ),
        ),
      ) as _i5.Future<E>);
  @override
  _i5.Stream<List<_i11.BudgetBarModel>> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
      ) as _i5.Stream<List<_i11.BudgetBarModel>>);
  @override
  _i5.Stream<List<_i11.BudgetBarModel>> takeWhile(
          bool Function(List<_i11.BudgetBarModel>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
      ) as _i5.Stream<List<_i11.BudgetBarModel>>);
  @override
  _i5.Stream<List<_i11.BudgetBarModel>> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
      ) as _i5.Stream<List<_i11.BudgetBarModel>>);
  @override
  _i5.Stream<List<_i11.BudgetBarModel>> skipWhile(
          bool Function(List<_i11.BudgetBarModel>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
      ) as _i5.Stream<List<_i11.BudgetBarModel>>);
  @override
  _i5.Stream<List<_i11.BudgetBarModel>> distinct(
          [bool Function(
            List<_i11.BudgetBarModel>,
            List<_i11.BudgetBarModel>,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
      ) as _i5.Stream<List<_i11.BudgetBarModel>>);
  @override
  _i5.Future<List<_i11.BudgetBarModel>> firstWhere(
    bool Function(List<_i11.BudgetBarModel>)? test, {
    List<_i11.BudgetBarModel> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
      ) as _i5.Future<List<_i11.BudgetBarModel>>);
  @override
  _i5.Future<List<_i11.BudgetBarModel>> lastWhere(
    bool Function(List<_i11.BudgetBarModel>)? test, {
    List<_i11.BudgetBarModel> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
      ) as _i5.Future<List<_i11.BudgetBarModel>>);
  @override
  _i5.Future<List<_i11.BudgetBarModel>> singleWhere(
    bool Function(List<_i11.BudgetBarModel>)? test, {
    List<_i11.BudgetBarModel> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
      ) as _i5.Future<List<_i11.BudgetBarModel>>);
  @override
  _i5.Future<List<_i11.BudgetBarModel>> elementAt(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
        returnValueForMissingStub: _i5.Future<List<_i11.BudgetBarModel>>.value(
            <_i11.BudgetBarModel>[]),
      ) as _i5.Future<List<_i11.BudgetBarModel>>);
  @override
  _i5.Stream<List<_i11.BudgetBarModel>> timeout(
    Duration? timeLimit, {
    void Function(_i5.EventSink<List<_i11.BudgetBarModel>>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
      ) as _i5.Stream<List<_i11.BudgetBarModel>>);
}

/// A class which mocks [RemoteDBHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDBHelper extends _i1.Mock implements _i2.RemoteDBHelper {
  @override
  _i3.FirebaseAuth get userInstance => (super.noSuchMethod(
        Invocation.getter(#userInstance),
        returnValue: _FakeFirebaseAuth_1(
          this,
          Invocation.getter(#userInstance),
        ),
        returnValueForMissingStub: _FakeFirebaseAuth_1(
          this,
          Invocation.getter(#userInstance),
        ),
      ) as _i3.FirebaseAuth);
  @override
  set userInstance(_i3.FirebaseAuth? _userInstance) => super.noSuchMethod(
        Invocation.setter(
          #userInstance,
          _userInstance,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.FirebaseFirestore get firebaseInstance => (super.noSuchMethod(
        Invocation.getter(#firebaseInstance),
        returnValue: _FakeFirebaseFirestore_5(
          this,
          Invocation.getter(#firebaseInstance),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_5(
          this,
          Invocation.getter(#firebaseInstance),
        ),
      ) as _i6.FirebaseFirestore);
  @override
  set firebaseInstance(_i6.FirebaseFirestore? _firebaseInstance) =>
      super.noSuchMethod(
        Invocation.setter(
          #firebaseInstance,
          _firebaseInstance,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<dynamic> createUser() => (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<_i7.TransactionModel> addTransaction(
          _i7.TransactionModel? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [transaction],
        ),
        returnValue:
            _i5.Future<_i7.TransactionModel>.value(_FakeTransactionModel_6(
          this,
          Invocation.method(
            #addTransaction,
            [transaction],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i7.TransactionModel>.value(_FakeTransactionModel_6(
          this,
          Invocation.method(
            #addTransaction,
            [transaction],
          ),
        )),
      ) as _i5.Future<_i7.TransactionModel>);
  @override
  _i5.Future<dynamic> removeTransaction(_i7.TransactionModel? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTransaction,
          [transaction],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Stream<List<_i7.TransactionModel>> readTransactions() =>
      (super.noSuchMethod(
        Invocation.method(
          #readTransactions,
          [],
        ),
        returnValue: _i5.Stream<List<_i7.TransactionModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i7.TransactionModel>>.empty(),
      ) as _i5.Stream<List<_i7.TransactionModel>>);
  @override
  _i5.Future<bool> hasTransactions() => (super.noSuchMethod(
        Invocation.method(
          #hasTransactions,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<dynamic> addCategory(_i8.CategoryModel? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCategory,
          [category],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> removeCategory(_i8.CategoryModel? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeCategory,
          [category],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<bool> hasCategories() => (super.noSuchMethod(
        Invocation.method(
          #hasCategories,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Stream<List<_i8.CategoryModel>> readCategories() => (super.noSuchMethod(
        Invocation.method(
          #readCategories,
          [],
        ),
        returnValue: _i5.Stream<List<_i8.CategoryModel>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i8.CategoryModel>>.empty(),
      ) as _i5.Stream<List<_i8.CategoryModel>>);
  @override
  _i5.Future<_i8.CategoryModel> getCategory(String? catID) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategory,
          [catID],
        ),
        returnValue: _i5.Future<_i8.CategoryModel>.value(_FakeCategoryModel_7(
          this,
          Invocation.method(
            #getCategory,
            [catID],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i8.CategoryModel>.value(_FakeCategoryModel_7(
          this,
          Invocation.method(
            #getCategory,
            [catID],
          ),
        )),
      ) as _i5.Future<_i8.CategoryModel>);
  @override
  _i5.Future<_i5.Stream<List<_i7.TransactionModel>>> getTransactionsByCategory(
          String? catName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionsByCategory,
          [catName],
        ),
        returnValue: _i5.Future<_i5.Stream<List<_i7.TransactionModel>>>.value(
            _i5.Stream<List<_i7.TransactionModel>>.empty()),
        returnValueForMissingStub:
            _i5.Future<_i5.Stream<List<_i7.TransactionModel>>>.value(
                _i5.Stream<List<_i7.TransactionModel>>.empty()),
      ) as _i5.Future<_i5.Stream<List<_i7.TransactionModel>>>);
  @override
  _i5.Stream<List<_i12.SavingsModel>> readSaving(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #readSaving,
          [name],
        ),
        returnValue: _i5.Stream<List<_i12.SavingsModel>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i12.SavingsModel>>.empty(),
      ) as _i5.Stream<List<_i12.SavingsModel>>);
  @override
  _i5.Stream<List<_i12.SavingsModel>> readSavings() => (super.noSuchMethod(
        Invocation.method(
          #readSavings,
          [],
        ),
        returnValue: _i5.Stream<List<_i12.SavingsModel>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i12.SavingsModel>>.empty(),
      ) as _i5.Stream<List<_i12.SavingsModel>>);
  @override
  _i5.Future<dynamic> updateSavingValue(
    String? name,
    double? currVal,
    double? valToUpdate,
    bool? ifAdd,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSavingValue,
          [
            name,
            currVal,
            valToUpdate,
            ifAdd,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> addSaving(_i12.SavingsModel? saving) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSaving,
          [saving],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> deleteSaving(String? name) => (super.noSuchMethod(
        Invocation.method(
          #deleteSaving,
          [name],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> addEmptyBudgetBar(_i8.CategoryModel? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEmptyBudgetBar,
          [category],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> updateBudgetBarValOnChangedTransaction(
    String? transactionID,
    bool? isAdd,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBudgetBarValOnChangedTransaction,
          [
            transactionID,
            isAdd,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> updateBudgetBarLimit(
    String? categoryName,
    double? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBudgetBarLimit,
          [
            categoryName,
            limit,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Stream<List<_i11.BudgetBarModel>> readBudgetBars() => (super.noSuchMethod(
        Invocation.method(
          #readBudgetBars,
          [],
        ),
        returnValue: _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
      ) as _i5.Stream<List<_i11.BudgetBarModel>>);
  @override
  _i5.Stream<List<_i11.BudgetBarModel>> readBudgetBarsWithValue() =>
      (super.noSuchMethod(
        Invocation.method(
          #readBudgetBarsWithValue,
          [],
        ),
        returnValue: _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.BudgetBarModel>>.empty(),
      ) as _i5.Stream<List<_i11.BudgetBarModel>>);
  @override
  _i5.Future<dynamic> removeBudgetBar(String? categoryName) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeBudgetBar,
          [categoryName],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> userResetData() => (super.noSuchMethod(
        Invocation.method(
          #userResetData,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Stream<String> getCurrency() => (super.noSuchMethod(
        Invocation.method(
          #getCurrency,
          [],
        ),
        returnValue: _i5.Stream<String>.empty(),
        returnValueForMissingStub: _i5.Stream<String>.empty(),
      ) as _i5.Stream<String>);
  @override
  _i5.Future<void> changeCurrency(Object? newCurrency) => (super.noSuchMethod(
        Invocation.method(
          #changeCurrency,
          [newCurrency],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [TransactionModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionModel extends _i1.Mock implements _i7.TransactionModel {
  @override
  set transactionID(String? _transactionID) => super.noSuchMethod(
        Invocation.setter(
          #transactionID,
          _transactionID,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set userID(String? _userID) => super.noSuchMethod(
        Invocation.setter(
          #userID,
          _userID,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set categoryID(String? _categoryID) => super.noSuchMethod(
        Invocation.setter(
          #categoryID,
          _categoryID,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get expense => (super.noSuchMethod(
        Invocation.getter(#expense),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set expense(int? _expense) => super.noSuchMethod(
        Invocation.setter(
          #expense,
          _expense,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set name(String? _name) => super.noSuchMethod(
        Invocation.setter(
          #name,
          _name,
        ),
        returnValueForMissingStub: null,
      );
  @override
  num get total => (super.noSuchMethod(
        Invocation.getter(#total),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as num);
  @override
  set total(num? _total) => super.noSuchMethod(
        Invocation.setter(
          #total,
          _total,
        ),
        returnValueForMissingStub: null,
      );
  @override
  DateTime get date => (super.noSuchMethod(
        Invocation.getter(#date),
        returnValue: _FakeDateTime_8(
          this,
          Invocation.getter(#date),
        ),
        returnValueForMissingStub: _FakeDateTime_8(
          this,
          Invocation.getter(#date),
        ),
      ) as DateTime);
  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(
          #date,
          _date,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set notes(String? _notes) => super.noSuchMethod(
        Invocation.setter(
          #notes,
          _notes,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set location(_i6.GeoPoint? _location) => super.noSuchMethod(
        Invocation.setter(
          #location,
          _location,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set categoryColor(int? _categoryColor) => super.noSuchMethod(
        Invocation.setter(
          #categoryColor,
          _categoryColor,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i4.BuildContext {
  @override
  _i4.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_2(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_2(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i4.Widget);
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.InheritedWidget dependOnInheritedElement(
    _i4.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_9(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_9(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i4.InheritedWidget);
  @override
  void visitAncestorElements(bool Function(_i4.Element)? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void visitChildElements(_i4.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispatchNotification(_i4.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.DiagnosticsNode describeElement(
    String? name, {
    _i9.DiagnosticsTreeStyle? style = _i9.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_10(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_10(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);
  @override
  _i4.DiagnosticsNode describeWidget(
    String? name, {
    _i9.DiagnosticsTreeStyle? style = _i9.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_10(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_10(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);
  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i4.DiagnosticsNode>[],
        returnValueForMissingStub: <_i4.DiagnosticsNode>[],
      ) as List<_i4.DiagnosticsNode>);
  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_10(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_10(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i4.DiagnosticsNode);
}
